name: 'Terraform'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform-gcp/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform-gcp/**'

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment: [dev, prod]

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.7

    - name: Google Auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}
        project_id: eadtud

    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        install_components: 'gke-gcloud-auth-plugin'

    - name: Terraform Init
      run: |
        cd ${{ matrix.environment }}
        terraform init

    - name: Terraform Format
      run: |
        cd ${{ matrix.environment }}
        terraform fmt -check

    - name: Terraform Plan
      id: plan
      run: |
        cd ${{ matrix.environment }}
        terraform plan -no-color > plan.txt
        echo "PLAN<<EOF" >> $GITHUB_OUTPUT
        cat plan.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        # Check if there are any changes to apply
        if grep -q "No changes" plan.txt; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Plan for \`${{ matrix.environment }}\` environment
          \`\`\`
          ${steps.plan.outputs.PLAN}
          \`\`\`
          `;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.name,
            body: output
          })

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.plan.outputs.has_changes == 'true'
      run: |
        cd ${{ matrix.environment }}
        # Add a safeguard to prevent accidental cluster destruction
        if terraform plan -no-color | grep -q "will be destroyed"; then
          echo "::error::This plan would destroy resources. Please review the plan carefully."
          exit 1
        fi
        terraform apply -auto-approve 